// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    questionBanks QuestionBank[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum QuestionBankStatus {
    DRAFT
    PENDING
    PUBLISHED
    DECLINED
}

model QuestionBank {
    id          String     @id @default(cuid())
    name        String
    description String?
    status      QuestionBankStatus @default(DRAFT)
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
    questions   Question[]
    createdBy   User       @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
    @@index([status])
}

model Question {
    id            String       @id @default(cuid())
    text          String
    optionA       String
    optionB       String
    optionC       String
    optionD       String
    correctOption String
    explanation   String?
    attachmentUrl String?
    difficulty    String       @default("medium") // easy, medium, hard
    topic         String?
    tags          String[]     @default([])      // Array of tags for better organization
    timeLimit     Int?         // Time limit in seconds
    usageCount    Int          @default(0)       // Track how many times this question is used
    createdAt     DateTime     @default(now())
    updatedAt     DateTime     @updatedAt
    questionBank  QuestionBank @relation(fields: [bankId], references: [id])
    bankId        String

    @@index([bankId])
    @@index([difficulty])
    @@index([topic])
    @@index([usageCount])
}


